{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/meganliles/CS419/Assignments/final-project-lilesme-portfolio/src/components/Spotify.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\n\nfunction Spotify() {\n  var _useState = useState([]),\n      songs = _useState[0],\n      setSongs = _useState[1];\n\n  var _useState2 = useState(false),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  function fetchSpotifyData() {\n    var responseBody, response;\n    return _regeneratorRuntime.async(function fetchSpotifyData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            responseBody = {};\n            setLoading(true);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch(\"https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=5\\\" -H \\\"Accept: application/json\\\" -H \\\"Content-Type: application/json\\\" -H \\\"Authorization: Bearer BQDEuD5-GV7XCVv6xJdrVsoHwyb1B9MNT8pafW1dqI-YaLbDbqgvw33paOK5DIsvfv1E4fc2eSMHIesn2B-gSN7MdcP6UEW2oobRsFU7doGE8gJCF5U0_JIo4l8AxxtE510pO9quobE_8ng2GhzPIQ\\\")\", {\n              signal: controller.signal\n            }));\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            responseBody = _context.sent;\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (_context.t0 instanceof DOMException) {\n              console.log(\"== HTTP request aborted\");\n            } else {\n              setError(true);\n              console.log(_context.t0);\n            }\n\n          case 14:\n            if (!ignore) {\n              setError(false);\n              setLoading(false);\n              setSongs(responseBody.items || []);\n            } else {\n              console.log(\"== ignoring results\");\n            }\n\n            fetchSpotifyData();\n            return _context.abrupt(\"return\", function () {\n              controller.abort();\n              ignore = true;\n            });\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 11]], _Promise);\n  }\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, error && __jsx(ErrorContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Error!\"), loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }) : __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, songs.map(function (song, key) {\n    return __jsx(\"li\", {\n      key: song[key].id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: song[key].preview_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, song[key].name));\n  })));\n}\n\n;\nexport default Spotify;","map":{"version":3,"sources":["/Users/meganliles/CS419/Assignments/final-project-lilesme-portfolio/src/components/Spotify.js"],"names":["React","useState","useEffect","fetch","Spotify","songs","setSongs","error","setError","loading","setLoading","fetchSpotifyData","responseBody","signal","controller","response","json","DOMException","console","log","ignore","items","abort","map","song","key","id","preview_url","name"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,SAASC,OAAT,GAAmB;AAAA,kBACWH,QAAQ,CAAC,EAAD,CADnB;AAAA,MACTI,KADS;AAAA,MACFC,QADE;;AAAA,mBAEWL,QAAQ,CAAC,KAAD,CAFnB;AAAA,MAETM,KAFS;AAAA,MAEFC,QAFE;;AAAA,mBAGeP,QAAQ,CAAC,KAAD,CAHvB;AAAA,MAGTQ,OAHS;AAAA,MAGAC,UAHA;;AAKjB,WAAeC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,YAAAA,YADN,GACqB,EADrB;AAEEF,YAAAA,UAAU,CAAC,IAAD,CAAV;AAFF;AAAA;AAAA,6CAK2BP,KAAK,mVAE1B;AAAEU,cAAAA,MAAM,EAAEC,UAAU,CAACD;AAArB,aAF0B,CALhC;;AAAA;AAKUE,YAAAA,QALV;AAAA;AAAA,6CASyBA,QAAQ,CAACC,IAAT,EATzB;;AAAA;AASIJ,YAAAA,YATJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAWM,gBAAI,uBAAaK,YAAjB,EAA+B;AAC7BC,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,aAFD,MAEO;AACLX,cAAAA,QAAQ,CAAC,IAAD,CAAR;AACAU,cAAAA,OAAO,CAACC,GAAR;AACD;;AAhBP;AAkBI,gBAAI,CAACC,MAAL,EAAa;AACXZ,cAAAA,QAAQ,CAAC,KAAD,CAAR;AACAE,cAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,cAAAA,QAAQ,CAACM,YAAY,CAACS,KAAb,IAAsB,EAAvB,CAAR;AACD,aAJD,MAIO;AACLH,cAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;;AAEHR,YAAAA,gBAAgB;AA1BlB,6CA2BS,YAAM;AACXG,cAAAA,UAAU,CAACQ,KAAX;AACAF,cAAAA,MAAM,GAAG,IAAT;AACD,aA9BH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgCA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,KAAK,IAAI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADZ,EAEGE,OAAO,GACN,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAGN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KAAK,CAACkB,GAAN,CAAU,UAACC,IAAD,EAAOC,GAAP;AAAA,WACT;AAAI,MAAA,GAAG,EAAED,IAAI,CAACC,GAAD,CAAJ,CAAUC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAEF,IAAI,CAACC,GAAD,CAAJ,CAAUE,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCH,IAAI,CAACC,GAAD,CAAJ,CAAUG,IAA3C,CADF,CADS;AAAA,GAAV,CADH,CALJ,CADF;AAgBD;;AAAA;AAED,eAAexB,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\n\nfunction Spotify() {\n  const [ songs, setSongs ] = useState([]);\n  const [ error, setError ] = useState(false);\n  const [ loading, setLoading ] = useState(false);\n\n  async function fetchSpotifyData() {\n    let responseBody = {};\n    setLoading(true);\n\n    try {\n      const response = await fetch(\n        `https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=5\" -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer BQDEuD5-GV7XCVv6xJdrVsoHwyb1B9MNT8pafW1dqI-YaLbDbqgvw33paOK5DIsvfv1E4fc2eSMHIesn2B-gSN7MdcP6UEW2oobRsFU7doGE8gJCF5U0_JIo4l8AxxtE510pO9quobE_8ng2GhzPIQ\")`,\n        { signal: controller.signal }\n      );\n      responseBody = await response.json();\n    } catch (e) {\n        if (e instanceof DOMException) {\n          console.log(\"== HTTP request aborted\")\n        } else {\n          setError(true);\n          console.log(e);\n        }\n      }\n      if (!ignore) {\n        setError(false);\n        setLoading(false);\n        setSongs(responseBody.items || []);\n      } else {\n        console.log(\"== ignoring results\");\n      }\n\n    fetchSpotifyData();\n    return () => {\n      controller.abort();\n      ignore = true;\n    };\n  }\n  return (\n    <div>\n      {error && <ErrorContainer>Error!</ErrorContainer>}\n      {loading ? (\n        <Spinner />\n      ) :\n        <ul>\n          {songs.map((song, key) => (\n            <li key={song[key].id}>\n              <a href={song[key].preview_url}>{song[key].name}</a>\n            </li>\n          ))}\n        </ul>\n      }\n    </div>\n  );\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}