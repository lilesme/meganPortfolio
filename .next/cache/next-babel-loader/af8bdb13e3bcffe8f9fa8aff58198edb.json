{"ast":null,"code":"var _jsxFileName = \"/Users/meganliles/CS419/Assignments/final-project-lilesme-portfolio/src/pages/github.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport fetch from 'isomorphic-unfetch';\nimport queryString from 'query-string';\nimport { Switch, Route, Redirect, useLocation } from 'react-router-dom';\nimport { useRouter } from 'next/router';\nimport { Input, Button } from '../components/FormComponents';\nimport Spinner from '../components/Spinner';\nimport ErrorContainer from '../components/ErrorContainer';\nimport Layout from '../components/Layout';\n\nfunction useQueryString() {\n  return queryString.parse(useLocation().search);\n}\n\nfunction Github() {\n  const router = useRouter();\n  const query = router.query.q;\n  const {\n    0: inputQuery,\n    1: setInputQuery\n  } = useState(query || \"\");\n  const {\n    0: repos,\n    1: setRepos\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(false); //const history = useHistory();\n\n  useEffect(() => {\n    if (query) {\n      let ignore = false;\n      const controller = new AbortController();\n\n      async function fetchSearchResults() {\n        let responseBody = {};\n        setLoading(true);\n\n        try {\n          const response = await fetch(`https://api.github.com/search/repositories?q=${query}&sort=stars`, {\n            signal: controller.signal\n          });\n          responseBody = await response.json();\n        } catch (e) {\n          if (e instanceof DOMException) {\n            console.log(\"== HTTP request aborted\");\n          } else {\n            setError(true);\n            console.log(e);\n          }\n        }\n\n        if (!ignore) {\n          setError(false);\n          setLoading(false);\n          setRepos(responseBody.items);\n        } else {\n          console.log(\"== ignoring results\");\n        } // console.log(\"== response body:\", responseBody);\n\n      }\n\n      fetchSearchResults();\n      return () => {\n        controller.abort();\n        ignore = true;\n      };\n    }\n  }, [query]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Github\")), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      history.push(`?q=${inputQuery}`);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(Input, {\n    value: inputQuery,\n    onChange: e => setInputQuery(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), __jsx(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Search\")), error && __jsx(ErrorContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Error!\"), loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }) : __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, repos.map(repo => __jsx(\"li\", {\n    key: repo.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    href: repo.html_url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, repo.full_name))))));\n}\n\nexport default Github;","map":{"version":3,"sources":["/Users/meganliles/CS419/Assignments/final-project-lilesme-portfolio/src/pages/github.js"],"names":["React","useState","useEffect","useHistory","fetch","queryString","Switch","Route","Redirect","useLocation","useRouter","Input","Button","Spinner","ErrorContainer","Layout","useQueryString","parse","search","Github","router","query","q","inputQuery","setInputQuery","repos","setRepos","loading","setLoading","error","setError","ignore","controller","AbortController","fetchSearchResults","responseBody","response","signal","json","e","DOMException","console","log","items","abort","preventDefault","history","push","target","value","map","repo","id","html_url","full_name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport fetch from 'isomorphic-unfetch';\n\nimport queryString from 'query-string';\nimport { Switch, Route, Redirect, useLocation } from 'react-router-dom';\nimport { useRouter } from 'next/router';\n\nimport { Input, Button } from '../components/FormComponents';\nimport Spinner from '../components/Spinner';\nimport ErrorContainer from '../components/ErrorContainer';\n\nimport Layout from '../components/Layout';\n\nfunction useQueryString() {\n  return queryString.parse(useLocation().search);\n}\n\nfunction Github() {\n  const router = useRouter();\n  const query = router.query.q;\n  const [ inputQuery, setInputQuery ] = useState(query || \"\");\n  const [ repos, setRepos ] = useState([]);\n  const [ loading, setLoading ] = useState(false);\n  const [ error, setError ] = useState(false);\n  //const history = useHistory();\n\n  useEffect(() => {\n    if (query) {\n      let ignore = false;\n      const controller = new AbortController();\n\n      async function fetchSearchResults() {\n        let responseBody = {};\n        setLoading(true);\n        try {\n          const response = await fetch(\n            `https://api.github.com/search/repositories?q=${query}&sort=stars`,\n            { signal: controller.signal }\n          );\n          responseBody = await response.json();\n        } catch (e) {\n          if (e instanceof DOMException) {\n            console.log(\"== HTTP request aborted\");\n          } else {\n            setError(true);\n            console.log(e);\n          }\n        }\n\n        if (!ignore) {\n          setError(false);\n          setLoading(false);\n          setRepos(responseBody.items);\n        } else {\n          console.log(\"== ignoring results\");\n        }\n        // console.log(\"== response body:\", responseBody);\n      }\n\n      fetchSearchResults();\n      return () => {\n        controller.abort();\n        ignore = true;\n      };\n    }\n  }, [ query ]);\n\n  return (\n    <div>\n      <Layout>\n        <h1>Github</h1>\n      </Layout>\n      <div>\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        history.push(`?q=${inputQuery}`);\n      }}>\n        <Input\n          value={inputQuery}\n          onChange={e => setInputQuery(e.target.value)}\n        />\n        <Button type=\"submit\">Search</Button>\n      </form>\n      {error && <ErrorContainer>Error!</ErrorContainer>}\n      {loading ? (\n        <Spinner />\n      ) :\n        <ul>\n          {repos.map(repo => (\n            <li key={repo.id}>\n              <a href={repo.html_url}>{repo.full_name}</a>\n            </li>\n          ))}\n        </ul>\n      }\n    </div>\n  </div>\n  );\n}\n\nexport default Github;\n"]},"metadata":{},"sourceType":"module"}