{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectDestructuringEmpty from \"@babel/runtime-corejs2/helpers/esm/objectDestructuringEmpty\";\nvar _jsxFileName = \"/Users/meganliles/CS419/Assignments/final-project-lilesme-portfolio/src/components/Spotify.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport Spinner from '../components/Spinner';\nimport ErrorContainer from '../components/ErrorContainer';\n\nfunction Spotify() {\n  var router = useRouter();\n  var query = router.query.q;\n\n  var _useState = useState([]),\n      songs = _useState[0],\n      setSongs = _useState[1];\n\n  var _useState2 = useState(false),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  useEffect(function (_ref) {\n    _objectDestructuringEmpty(_ref);\n\n    if (query) {\n      var fetchSpotifyData = function fetchSpotifyData() {\n        var responseBody, response;\n        return _regeneratorRuntime.async(function fetchSpotifyData$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                responseBody = {};\n                setLoading(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(fetch('https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=5', {\n                  method: 'GET',\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer BQDEuD5-GV7XCVv6xJdrVsoHwyb1B9MNT8pafW1dqI-YaLbDbqgvw33paOK5DIsvfv1E4fc2eSMHIesn2B-gSN7MdcP6UEW2oobRsFU7doGE8gJCF5U0_JIo4l8AxxtE510pO9quobE_8ng2GhzPIQ'\n                  }\n                }));\n\n              case 5:\n                response = _context.sent;\n                _context.next = 8;\n                return _regeneratorRuntime.awrap(response.json());\n\n              case 8:\n                responseBody = _context.sent;\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (_context.t0 instanceof DOMException) {\n                  console.log(\"== HTTP request aborted\");\n                } else {\n                  setError(true);\n                  console.log(_context.t0);\n                }\n\n              case 14:\n                if (!ignore) {\n                  setError(false);\n                  setLoading(false);\n                  setSongs(responseBody.items || []);\n                } else {\n                  console.log(\"== ignoring results\");\n                }\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[2, 11]], _Promise);\n      };\n\n      var ignore = false;\n      var controller = new AbortController();\n      fetchSpotifyData();\n      return function () {\n        controller.abort();\n        ignore = true;\n      };\n    }\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, error && __jsx(ErrorContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Error!\"), loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }) : __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, songs.map(function (song, key) {\n    return __jsx(\"li\", {\n      key: song[key].id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: song[key].preview_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, song[key].name));\n  })));\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/meganliles/CS419/Assignments/final-project-lilesme-portfolio/src/components/Spotify.js"],"names":["React","useState","useEffect","fetch","useRouter","Spinner","ErrorContainer","Spotify","router","query","q","songs","setSongs","error","setError","loading","setLoading","fetchSpotifyData","responseBody","method","headers","response","json","DOMException","console","log","ignore","items","controller","AbortController","abort","map","song","key","id","preview_url","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport Spinner from '../components/Spinner';\nimport ErrorContainer from '../components/ErrorContainer';\n\nfunction Spotify() {\n  const router = useRouter();\n  const query = router.query.q;\n  const [ songs, setSongs ] = useState([]);\n  const [ error, setError ] = useState(false);\n  const [ loading, setLoading ] = useState(false);\n\n  useEffect(({}) => {\n    if (query) {\n      let ignore = false;\n      const controller = new AbortController();\n\n      async function fetchSpotifyData() {\n        let responseBody = {};\n        setLoading(true);\n        try {\n          const response = await fetch('https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=5',\n          {\n            method: 'GET',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': 'Bearer BQDEuD5-GV7XCVv6xJdrVsoHwyb1B9MNT8pafW1dqI-YaLbDbqgvw33paOK5DIsvfv1E4fc2eSMHIesn2B-gSN7MdcP6UEW2oobRsFU7doGE8gJCF5U0_JIo4l8AxxtE510pO9quobE_8ng2GhzPIQ'\n            }}\n          );\n          responseBody = await response.json();\n        } catch (e) {\n            if (e instanceof DOMException) {\n              console.log(\"== HTTP request aborted\");\n            } else {\n              setError(true);\n              console.log(e);\n            }\n          }\n\n          if (!ignore) {\n            setError(false);\n            setLoading(false);\n            setSongs(responseBody.items || []);\n          } else {\n            console.log(\"== ignoring results\");\n          }\n        }\n\n        fetchSpotifyData();\n        return () => {\n          controller.abort();\n          ignore = true;\n        };\n      }\n  }, []);\n\n    return (\n      <div>\n        {error && <ErrorContainer>Error!</ErrorContainer>}\n        {loading ? (\n          <Spinner />\n        ) :\n          <ul>\n            {songs.map((song, key) => (\n              <li key={song[key].id}>\n                <a href={song[key].preview_url}>{song[key].name}</a>\n              </li>\n            ))}\n          </ul>\n        }\n      </div>\n    );\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}