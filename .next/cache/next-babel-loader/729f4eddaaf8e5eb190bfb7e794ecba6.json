{"ast":null,"code":"var _jsxFileName = \"/Users/meganliles/CS419/Assignments/final-project-lilesme-portfolio/src/components/Spotify.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport Spinner from '../components/Spinner';\nimport ErrorContainer from '../components/ErrorContainer';\n\nfunction Spotify() {\n  const router = useRouter();\n  const query = router.query.q;\n  const {\n    0: songs,\n    1: setSongs\n  } = useState([]);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    let ignore = false;\n    const controller = new AbortController();\n\n    async function fetchSpotifyData() {\n      let responseBody = {};\n      setLoading(true);\n\n      try {\n        const response = await fetch('https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=5', {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer BQDEuD5-GV7XCVv6xJdrVsoHwyb1B9MNT8pafW1dqI-YaLbDbqgvw33paOK5DIsvfv1E4fc2eSMHIesn2B-gSN7MdcP6UEW2oobRsFU7doGE8gJCF5U0_JIo4l8AxxtE510pO9quobE_8ng2GhzPIQ'\n          }\n        });\n        responseBody = await response.json();\n      } catch (e) {\n        if (e instanceof DOMException) {\n          console.log(\"== HTTP request aborted\");\n        } else {\n          setError(true);\n          console.log(e);\n        }\n      }\n\n      if (!ignore) {\n        setError(false);\n        setLoading(false);\n        setSongs(responseBody.items);\n      } else {\n        console.log(\"== ignoring results\");\n      }\n    }\n\n    fetchSpotifyData();\n    return () => {\n      controller.abort();\n      ignore = true;\n    };\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, error && __jsx(ErrorContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Error!\"), loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }) : __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, songs.map((song, key) => __jsx(\"li\", {\n    key: song[key].id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    href: song[key].preview_url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, song[key].name)))));\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/meganliles/CS419/Assignments/final-project-lilesme-portfolio/src/components/Spotify.js"],"names":["React","useState","useEffect","fetch","useRouter","Spinner","ErrorContainer","Spotify","router","query","q","songs","setSongs","error","setError","loading","setLoading","ignore","controller","AbortController","fetchSpotifyData","responseBody","response","method","headers","json","e","DOMException","console","log","items","abort","map","song","key","id","preview_url","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAEA,SAASC,OAAT,GAAmB;AACjB,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,QAAMK,KAAK,GAAGD,MAAM,CAACC,KAAP,CAAaC,CAA3B;AACA,QAAM;AAAA,OAAEC,KAAF;AAAA,OAASC;AAAT,MAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAAEY,KAAF;AAAA,OAASC;AAAT,MAAsBb,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AAAA,OAAEc,OAAF;AAAA,OAAWC;AAAX,MAA0Bf,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,MAAM,GAAG,KAAb;AACA,UAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;;AAEA,mBAAeC,gBAAf,GAAkC;AAChC,UAAIC,YAAY,GAAG,EAAnB;AACAL,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACF,cAAMM,QAAQ,GAAG,MAAMnB,KAAK,CAAC,mFAAD,EAC5B;AACEoB,UAAAA,MAAM,EAAE,KADV;AAEEC,UAAAA,OAAO,EAAE;AACP,sBAAU,kBADH;AAEP,4BAAgB,kBAFT;AAGP,6BAAiB;AAHV;AAFX,SAD4B,CAA5B;AASAH,QAAAA,YAAY,GAAG,MAAMC,QAAQ,CAACG,IAAT,EAArB;AACD,OAXD,CAWE,OAAOC,CAAP,EAAU;AACR,YAAIA,CAAC,YAAYC,YAAjB,EAA+B;AAC7BC,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,SAFD,MAEO;AACLf,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACAc,UAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACD;AACF;;AAED,UAAI,CAACT,MAAL,EAAa;AACXH,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACAE,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,QAAAA,QAAQ,CAACS,YAAY,CAACS,KAAd,CAAR;AACD,OAJD,MAIO;AACLF,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AACF;;AAEDT,IAAAA,gBAAgB;AAChB,WAAO,MAAM;AACXF,MAAAA,UAAU,CAACa,KAAX;AACAd,MAAAA,MAAM,GAAG,IAAT;AACD,KAHD;AAIH,GAzCQ,EAyCN,EAzCM,CAAT;AA2CE,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KAAK,IAAI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADZ,EAEGE,OAAO,GACN,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAGN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KAAK,CAACqB,GAAN,CAAU,CAACC,IAAD,EAAOC,GAAP,KACT;AAAI,IAAA,GAAG,EAAED,IAAI,CAACC,GAAD,CAAJ,CAAUC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,IAAI,EAAEF,IAAI,CAACC,GAAD,CAAJ,CAAUE,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCH,IAAI,CAACC,GAAD,CAAJ,CAAUG,IAA3C,CADF,CADD,CADH,CALJ,CADF;AAgBH;;AAED,eAAe9B,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport Spinner from '../components/Spinner';\nimport ErrorContainer from '../components/ErrorContainer';\n\nfunction Spotify() {\n  const router = useRouter();\n  const query = router.query.q;\n  const [ songs, setSongs ] = useState([]);\n  const [ error, setError ] = useState(false);\n  const [ loading, setLoading ] = useState(false);\n\n  useEffect(() => {\n    let ignore = false;\n    const controller = new AbortController();\n\n    async function fetchSpotifyData() {\n      let responseBody = {};\n      setLoading(true);\n      try {\n        const response = await fetch('https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=5',\n        {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer BQDEuD5-GV7XCVv6xJdrVsoHwyb1B9MNT8pafW1dqI-YaLbDbqgvw33paOK5DIsvfv1E4fc2eSMHIesn2B-gSN7MdcP6UEW2oobRsFU7doGE8gJCF5U0_JIo4l8AxxtE510pO9quobE_8ng2GhzPIQ'\n          }}\n        );\n        responseBody = await response.json();\n      } catch (e) {\n          if (e instanceof DOMException) {\n            console.log(\"== HTTP request aborted\");\n          } else {\n            setError(true);\n            console.log(e);\n          }\n        }\n\n        if (!ignore) {\n          setError(false);\n          setLoading(false);\n          setSongs(responseBody.items);\n        } else {\n          console.log(\"== ignoring results\");\n        }\n      }\n\n      fetchSpotifyData();\n      return () => {\n        controller.abort();\n        ignore = true;\n      };\n  }, []);\n\n    return (\n      <div>\n        {error && <ErrorContainer>Error!</ErrorContainer>}\n        {loading ? (\n          <Spinner />\n        ) :\n          <ul>\n            {songs.map((song, key) => (\n              <li key={song[key].id}>\n                <a href={song[key].preview_url}>{song[key].name}</a>\n              </li>\n            ))}\n          </ul>\n        }\n      </div>\n    );\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}